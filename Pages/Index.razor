@page "/"
@inject LocalStorage Storage
<div class="row justify-content-center">
    <div class="col-sm-auto text-center">
        <button class="btn btn-outline-dark" @onclick="@(async() => await PrevWeek())">&lt;</button>
    </div>
    <div class="col-sm col-md-3 align-middle text-center">
        @WeeksFromOrAheadString(selectedDay)
    </div>
    <div class="col-sm-auto text-center">
        <button class="btn btn-outline-dark" @onclick="@(async() => await NextWeek())">&gt;</button>
    </div>
</div>

<div class="row justify-content-md-center mt-2">
    @for (int dayIndex = 0; dayIndex < 7; ++dayIndex)
    {
        var day = selectedDay.LastSunday().AddDays(dayIndex);
        <div class="col col-sm col-md-auto px-0 mx-md-2">
            <button @onclick="@(async () => await SetDay(day))" type="button" disabled="@(!dayIsLoaded[dayIndex])"
                    class="@((day.Date == selectedDay.Date) ? "active" : "") btn btn-outline-dark btn-block"
            >@day.DayOfWeek</button>
        </div>

    }
</div>

<div class="row justify-content-md-center mt-2">
    @foreach (Meal meal in Enum.GetValues(typeof(Meal)))
    {
        <div class="col col-sm col-md-auto px-0 mx-md-2">
            <button type="button" class="btn btn-outline-dark btn-block @(selectedMeal == meal ? "active" : "")"
                    @onclick="@(() => SetMeal(meal))">
                @meal
            </button>
        </div>
    }
</div>

@if (dailyMenus == null)
{
    <h2>Fetching menus... Please wait.</h2>
}
// Show menus if there is a nonempty category in a menu of the selected menu
else if (dailyMenus.Where(m => m.Meal == selectedMeal)
    .Any(menu => menu.Categories.Any(cat => cat.Items.Count > 0)))
{


    var menus = dailyMenus.Where(menu => menu.Meal == selectedMeal);
    int count = menus.Count();
    int i = 0;
    @foreach(var menu in menus)
    {
        <h2>@menu.Location</h2>
        @foreach (var category in menu.Categories)
        {
            <!-- Some categories only have addon items, so check count here -->
            if (category.Items.Count > 0)
            {
                <h5>@category.Name</h5>
                <ul>
                    @foreach (var item in category.Items)
                    {
                        <li>@item</li>
                    }
                </ul>
            }

        }
        if (i != count - 1)
        {
            <hr />
        }
        ++i;
    }
}
else
{
    <h2>No data was found for that meal.</h2>
}


@code {
    MenuManager menuMgr;
    DateTime selectedDay = DateTime.Now.Date;
    List<Menu> dailyMenus = null;
    Meal selectedMeal = Meal.Breakfast;
    bool[] dayIsLoaded = new bool[7];

    protected override async Task OnInitializedAsync()
    {
        menuMgr = new MenuManager(Storage);
        dailyMenus = await menuMgr.LoadDay(selectedDay);
        dayIsLoaded[(int) selectedDay.DayOfWeek] = true;
        await LoadWeeklyMenus();
    }

    protected async Task LoadWeeklyMenus()
    {
        // Load other days in background
        var tasks = new List<Task>();
        for (int i = 0; i < 7; ++i)
        {
            // See https://stackoverflow.com/questions/271440/captured-variable-in-a-loop-in-c-sharp
            int iCopy = i;

            var task = menuMgr.LoadDay(selectedDay.LastSunday().AddDays(iCopy))
                .ContinueWith(x => {
                    Console.WriteLine($"Loaded menus for {(DayOfWeek) iCopy}");
                    dayIsLoaded[iCopy] = true;
                    StateHasChanged();
                } );
            tasks.Add(task);
        }
        // Wait for tasks to finish
        foreach (Task t in tasks)
        {
            await t;
        }
    }

    protected async Task SetDay(DateTime day)
    {
        this.selectedDay = day;
        this.dailyMenus = null;
        this.dailyMenus = await menuMgr.LoadDay(day);
    }

    protected void SetMeal(Meal meal)
    {
        this.selectedMeal = meal;
    }

    protected async Task PrevWeek()
    {
        dayIsLoaded = new bool[7];
        selectedDay = selectedDay.AddDays(-7).LastSunday();
        this.dailyMenus = null;
        this.dailyMenus = await menuMgr.LoadDay(selectedDay);
        await LoadWeeklyMenus();
    }

    protected async Task NextWeek()
    {
        dayIsLoaded = new bool[7];
        selectedDay = selectedDay.AddDays(7).LastSunday();
        this.dailyMenus = null;
        this.dailyMenus = await menuMgr.LoadDay(selectedDay);
        await LoadWeeklyMenus();
    }

    protected string WeeksFromOrAheadString(DateTime day)
    {
        int diff = DateTimeExtensions.WeekDifference(day, DateTime.Now);
        int abs = Math.Abs(diff);
        if (diff == 0)
            return "This week";
        return Math.Abs(diff) + (abs == 1 ? " week " : " weeks ") + (diff < 0 ? "ago" : "from now");
    }

}