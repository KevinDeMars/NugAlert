@page "/"
@inject LocalStorage Storage
<div class="row justify-content-center">
    <div class="col-sm-auto text-center">
        <button class="btn btn-outline-dark" @onclick="@(async() => await PrevWeek())">&lt;</button>
    </div>
    <div class="col-sm col-md-3 align-middle text-center">
        @WeeksFromOrAheadString(selectedDay)
    </div>
    <div class="col-sm-auto text-center">
        <button class="btn btn-outline-dark" @onclick="@(async() => await NextWeek())">&gt;</button>
    </div>
</div>

<div class="row justify-content-md-center mt-2">
    @for (int dayIndex = 0; dayIndex < 7; ++dayIndex)
    {
        var day = selectedDay.LastSunday().AddDays(dayIndex);
        <div class="col col-sm col-md-auto px-0 mx-md-2">
            <button @onclick="@(async () => await SetDay(day))" type="button" class="@((day.Date == selectedDay.Date) ? "active" : "") btn btn-outline-dark btn-block">@day.DayOfWeek</button>
        </div>

    }
</div>

<div class="row justify-content-md-center mt-2">
    @foreach (Meal meal in Enum.GetValues(typeof(Meal)))
    {
        <div class="col col-sm col-md-auto px-0 mx-md-2">
            <button type="button" class="btn btn-outline-dark btn-block @(selectedMeal == meal ? "active" : "")"
                    @onclick="@(() => SetMeal(meal))">
                @meal
            </button>
        </div>
    }
</div>

@if (dailyMenus == null)
{
    <h2>Fetching menus... Please wait.</h2>
}
// Show menus if there is a nonempty category in a menu of the selected menu
else if (dailyMenus.Where(m => m.Meal == selectedMeal)
    .Any(menu => menu.Categories.Any(cat => cat.Items.Count > 0)))
{
    
    
    @foreach (var menu in dailyMenus.Where(menu => menu.Meal == selectedMeal))
    {
        <h3>@menu.Location</h3>
        @foreach (var category in menu.Categories)
        {
            <!-- Some categories only have addon items, so check count here -->
            if (category.Items.Count > 0)
            {
                <h5>@category.Name</h5>
                <ul>
                    @foreach (var item in category.Items)
                    {
                        <li>@item</li>
                    }
                </ul>
            }

        }
    }
}
else
{
    <h2>No data was found for that meal.</h2>
}


@code {

    MenuManager menuMgr;
    DateTime selectedDay = DateTime.Now.Date;
    List<Menu> dailyMenus = null;
    Meal selectedMeal = Meal.Breakfast;

    protected override async Task OnInitializedAsync()
    {
        menuMgr = new MenuManager(Storage);
        dailyMenus = await menuMgr.LoadDay(selectedDay);
    }

    protected async Task SetDay(DateTime day)
    {
        this.selectedDay = day;
        this.dailyMenus = null;
        this.dailyMenus = await menuMgr.LoadDay(day);
    }

    protected void SetMeal(Meal meal)
    {
        this.selectedMeal = meal;
    }

    protected async Task PrevWeek()
    {
        selectedDay = selectedDay.AddDays(-7).LastSunday();
        this.dailyMenus = null;
        this.dailyMenus = await menuMgr.LoadDay(selectedDay);
    }

    protected async Task NextWeek()
    {
        selectedDay = selectedDay.AddDays(7).LastSunday();
        this.dailyMenus = null;
        this.dailyMenus = await menuMgr.LoadDay(selectedDay);
    }

    protected string WeeksFromOrAheadString(DateTime day)
    {
        int diff = DateTimeExtensions.WeekDifference(day, DateTime.Now);
        int abs = Math.Abs(diff);
        if (diff == 0)
            return "This week";
        return Math.Abs(diff) + (abs == 1 ? " week " : " weeks ") + (diff < 0 ? "ago" : "from now");
    }

}